package main

import (
	"errors"
	"fmt"
	"os"
	"strings"
	"text/template"
)

const (
	devTemplate = `
// Code generated by cudago. DO NOT EDIT.
{{ $argsName := .Name | lower }}
package {{.Package}} //the package where it is placed

import (
    "sync"
	cuda "github.com/InternatBlackhole/cudago/cuda"
)

type {{$argsName}}Args struct {
    sync.Mutex
{{range .Args}}    {{.}}
{{end}}
}

var (
    {{$argsName}}Args = {{$argsName}}Args{}
)

func {{.Name}}(blocks: int, threads: int, {{argprint .Args ","}}) error {
}

/*func {{.Name}}ASync(blocks: int, threads: int, args: {{.Name}}Args) (error, <-chan bool) {
    
}*/

const fatbin{{.Name}} = 
`
)

var templateFunctions = template.FuncMap{
	"upper":    strings.ToUpper,
	"lower":    strings.ToLower,
	"argprint": argPrint,
}

func createFileFromDevTemplate(kernel *Kernel, outFile *os.File) error {
	if outFile == nil {
		return errors.New("file is nil")
	}

	tmpl := template.New("devTemplate")
	tmpl = tmpl.Funcs(templateFunctions)

	tmpl, err := tmpl.Parse(devTemplate)
	if err != nil {
		return err
	}

	err = tmpl.Execute(outFile, kernel)
	if err != nil {
		return err
	}

	return nil
}

func argPrint(args []string, sep string) string {
	var builder strings.Builder
	for i, arg := range args {
		if i == len(args)-1 {
			fmt.Fprintf(&builder, "%s", arg)
		} else {
			fmt.Fprintf(&builder, "%s, ", arg)
		}
	}
	return builder.String()
}
