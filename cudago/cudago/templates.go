package main

import (
	"errors"
	"os"
	"strings"
	"text/template"
)

const (
	devTemplate = `
// Code generated by cudago. DO NOT EDIT.
	
package {{.Package}} //the package where it is placed

import (
    "sync"
)

type {{.Name | lower}}Args struct {
    sync.Mutex
{{range .Args}}    {{.}}
{{end}}
}

var (
    {{.Name | lower}}Args = {{.Name}}Args{}
)

func {{.Name}}Sync(blocks: int, threads: int, args: {{.Name}}Args) error {
    if args.
}

func {{.Name}}ASync(blocks: int, threads: int, args: {{.Name}}Args) (error, <-chan bool) {
    
}

const fatbin{{.Name}} = 
`
)

var templateFunctions = template.FuncMap{
	"upper": strings.ToUpper,
	"lower": strings.ToLower,
}

func createFileFromDevTemplate(kernel *Kernel, outFile *os.File) error {
	if outFile == nil {
		return errors.New("file is nil")
	}

	tmpl := template.New("devTemplate")
	tmpl = tmpl.Funcs(templateFunctions)

	tmpl, err := tmpl.Parse(devTemplate)
	if err != nil {
		return err
	}

	err = tmpl.Execute(outFile, kernel)
	if err != nil {
		return err
	}

	return nil
}
