// Code generated by cudago. Edit at your own risk.
package cu

import (
    "github.com/InternatBlackhole/cudago/cuda"
	"unsafe"
)


const (
	KeyInts = "ints"
)


type addtoallArgs struct {
    orig uintptr
    toAdd int
    size int

}

/*var (
    addtoallArgs = addtoallArgs{}

)*/







func AddToAll(grid, block cuda.Dim3, orig uintptr, toAdd int, size int) error {
	err := autoloadLib_ints()
	if err != nil {
		return err
	}
	kern, err := getKernel("ints", "addToAll")
	if err != nil {
		return err
	}
	params := addtoallArgs{
	    orig: orig,
	    toAdd: toAdd,
	    size: size,
	
	}
	return kern.Launch(grid, block, unsafe.Pointer(&params.orig), unsafe.Pointer(&params.toAdd), unsafe.Pointer(&params.size))
}

func AddToAllEx(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, orig uintptr, toAdd int, size int) error {
	err := autoloadLib_ints()
	if err != nil {
		return err
	}
	kern, err := getKernel("ints", "addToAll")
	if err != nil {
		return err
	}
	params := addtoallArgs{
	    orig: orig,
	    toAdd: toAdd,
	    size: size,
	
	}
	return kern.LaunchEx(grid, block, sharedMem, stream, unsafe.Pointer(&params.orig), unsafe.Pointer(&params.toAdd), unsafe.Pointer(&params.size))
}



var loaded_ints = false


func autoloadLib_ints() error {
	if loaded_ints {
		return nil
	}
	err := InitLibrary([]byte(Ints_ptxCode), "ints")
	if err != nil {
		return err
	}
	loaded_ints = true
	return nil
}

const Ints_ptxCode = `//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34431801
// Cuda compilation tools, release 12.6, V12.6.20
// Based on NVVM 7.0.1
//

.version 8.5
.target sm_52
.address_size 64

	// .globl	addToAll
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 $str[35] = {105, 100, 120, 32, 61, 32, 37, 100, 44, 32, 111, 114, 105, 103, 32, 61, 32, 37, 100, 44, 32, 110, 101, 119, 79, 114, 105, 103, 32, 61, 32, 37, 100, 10};

.visible .entry addToAll(
	.param .u64 addToAll_param_0,
	.param .u32 addToAll_param_1,
	.param .u32 addToAll_param_2
)
{
	.local .align 8 .b8 	__local_depot0[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [addToAll_param_0];
	ld.param.u32 	%r2, [addToAll_param_1];
	ld.param.u32 	%r3, [addToAll_param_2];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.u32 	%r7, [%rd4];
	add.s32 	%r8, %r7, %r2;
	st.global.u32 	[%rd4], %r8;
	add.u64 	%rd5, %SP, 0;
	add.u64 	%rd6, %SPL, 0;
	st.local.v2.u32 	[%rd6], {%r1, %r7};
	st.local.u32 	[%rd6+8], %r8;
	mov.u64 	%rd7, $str;
	cvta.global.u64 	%rd8, %rd7;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd5;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r9, [retval0+0];
	} // callseq 0

$L__BB0_2:
	ret;

}

`
