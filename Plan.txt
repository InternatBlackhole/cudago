Ideja 1: (podobno mumax)
	1. napišeš .cu file
	2. poženeš program, ki ustvari .go wrapper za ta .cu file in z nvcc prevede v fatbin, ali v binary za specificen gpu,
	   wrapper vsebuje vso kodo za komunikacijo z driverjem (loading, calling, blocking), možnost dostave rezultata preko kanala
	3. v svojem programu uvoziš ta package (če ni enak kot v katerem pišeš)
	4. uporabljaš te funkcije
	?5. prevedeš program (vključitev fatbin kar v executable, ali preko wrapperja)
	
kliči program samo enkrat in vsakič prevedi for dev (želi da je klicanje programa minimalno, ker kar naprej spreminja .cu file), DOKLER SE FUNCTION HEADER (IME IN ARGUMENTS) NE SPREMENI, NI TREBA KLICATI PROGRAM. (kako narediti? podobno kot make, poglej, če je nek compiled version starejši od source, če je, ga nvcc prevedi, ali pa shrani hash od source file nekam in ga primerjaj) 

Še boljše bi jima bilo, če bi naredil brez tega klica programa.

v wrapper bo treba dati cel ta cuda package, ki ga bom spisal

OBVEZNA UPORABA `extern "C"`, nobena funkcija ali spremenljivka ki vseuje __global__, __device__, __constant__ ne sme biti v komentarjih

en gpu lahko v enem cuda context izvaja vec kernels hkrati (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#concurrent-kernel-execution)

https://github.com/alecthomas/participle poglej za parser generator

extract stuff from PTX file?

BTW urejanje-4.cu ne dela pravilno za karkoli vecje od ali enako 1 << 16 elems